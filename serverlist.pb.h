// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverlist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serverlist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serverlist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serverlist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serverlist_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serverlist_2eproto;
namespace TeraLauncher {
class ServerList;
struct ServerListDefaultTypeInternal;
extern ServerListDefaultTypeInternal _ServerList_default_instance_;
class ServerList_Server;
struct ServerList_ServerDefaultTypeInternal;
extern ServerList_ServerDefaultTypeInternal _ServerList_Server_default_instance_;
}  // namespace TeraLauncher
PROTOBUF_NAMESPACE_OPEN
template<> ::TeraLauncher::ServerList* Arena::CreateMaybeMessage<::TeraLauncher::ServerList>(Arena*);
template<> ::TeraLauncher::ServerList_Server* Arena::CreateMaybeMessage<::TeraLauncher::ServerList_Server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TeraLauncher {

// ===================================================================

class ServerList_Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeraLauncher.ServerList.Server) */ {
 public:
  inline ServerList_Server() : ServerList_Server(nullptr) {}
  ~ServerList_Server() override;
  explicit PROTOBUF_CONSTEXPR ServerList_Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerList_Server(const ServerList_Server& from);
  ServerList_Server(ServerList_Server&& from) noexcept
    : ServerList_Server() {
    *this = ::std::move(from);
  }

  inline ServerList_Server& operator=(const ServerList_Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerList_Server& operator=(ServerList_Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerList_Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerList_Server* internal_default_instance() {
    return reinterpret_cast<const ServerList_Server*>(
               &_ServerList_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerList_Server& a, ServerList_Server& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerList_Server* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerList_Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerList_Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerList_Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerList_Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerList_Server& from) {
    ServerList_Server::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerList_Server* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeraLauncher.ServerList.Server";
  }
  protected:
  explicit ServerList_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawnameFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kNameFieldNumber = 4,
    kCrowdnessFieldNumber = 5,
    kOpenFieldNumber = 6,
    kPopupFieldNumber = 10,
    kIdFieldNumber = 1,
    kIpFieldNumber = 7,
    kPortFieldNumber = 8,
    kLangFieldNumber = 9,
  };
  // required bytes rawname = 2;
  bool has_rawname() const;
  private:
  bool _internal_has_rawname() const;
  public:
  void clear_rawname();
  const std::string& rawname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rawname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rawname();
  PROTOBUF_NODISCARD std::string* release_rawname();
  void set_allocated_rawname(std::string* rawname);
  private:
  const std::string& _internal_rawname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rawname(const std::string& value);
  std::string* _internal_mutable_rawname();
  public:

  // required bytes category = 3;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // required bytes name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes crowdness = 5;
  bool has_crowdness() const;
  private:
  bool _internal_has_crowdness() const;
  public:
  void clear_crowdness();
  const std::string& crowdness() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crowdness(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crowdness();
  PROTOBUF_NODISCARD std::string* release_crowdness();
  void set_allocated_crowdness(std::string* crowdness);
  private:
  const std::string& _internal_crowdness() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crowdness(const std::string& value);
  std::string* _internal_mutable_crowdness();
  public:

  // required bytes open = 6;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const std::string& open() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* open);
  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(const std::string& value);
  std::string* _internal_mutable_open();
  public:

  // required bytes popup = 10;
  bool has_popup() const;
  private:
  bool _internal_has_popup() const;
  public:
  void clear_popup();
  const std::string& popup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_popup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_popup();
  PROTOBUF_NODISCARD std::string* release_popup();
  void set_allocated_popup(std::string* popup);
  private:
  const std::string& _internal_popup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_popup(const std::string& value);
  std::string* _internal_mutable_popup();
  public:

  // required sfixed32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // required sfixed32 ip = 7;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  int32_t ip() const;
  void set_ip(int32_t value);
  private:
  int32_t _internal_ip() const;
  void _internal_set_ip(int32_t value);
  public:

  // required sfixed32 port = 8;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // required sfixed32 lang = 9;
  bool has_lang() const;
  private:
  bool _internal_has_lang() const;
  public:
  void clear_lang();
  int32_t lang() const;
  void set_lang(int32_t value);
  private:
  int32_t _internal_lang() const;
  void _internal_set_lang(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TeraLauncher.ServerList.Server)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crowdness_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr popup_;
    int32_t id_;
    int32_t ip_;
    int32_t port_;
    int32_t lang_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverlist_2eproto;
};
// -------------------------------------------------------------------

class ServerList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeraLauncher.ServerList) */ {
 public:
  inline ServerList() : ServerList(nullptr) {}
  ~ServerList() override;
  explicit PROTOBUF_CONSTEXPR ServerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerList(const ServerList& from);
  ServerList(ServerList&& from) noexcept
    : ServerList() {
    *this = ::std::move(from);
  }

  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerList& operator=(ServerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerList* internal_default_instance() {
    return reinterpret_cast<const ServerList*>(
               &_ServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerList& a, ServerList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerList& from) {
    ServerList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeraLauncher.ServerList";
  }
  protected:
  explicit ServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerList_Server Server;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
    kLastPlayedIdFieldNumber = 2,
    kUnknwn2FieldNumber = 3,
  };
  // repeated .TeraLauncher.ServerList.Server servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::TeraLauncher::ServerList_Server* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeraLauncher::ServerList_Server >*
      mutable_servers();
  private:
  const ::TeraLauncher::ServerList_Server& _internal_servers(int index) const;
  ::TeraLauncher::ServerList_Server* _internal_add_servers();
  public:
  const ::TeraLauncher::ServerList_Server& servers(int index) const;
  ::TeraLauncher::ServerList_Server* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeraLauncher::ServerList_Server >&
      servers() const;

  // required sfixed32 LastPlayedId = 2;
  bool has_lastplayedid() const;
  private:
  bool _internal_has_lastplayedid() const;
  public:
  void clear_lastplayedid();
  int32_t lastplayedid() const;
  void set_lastplayedid(int32_t value);
  private:
  int32_t _internal_lastplayedid() const;
  void _internal_set_lastplayedid(int32_t value);
  public:

  // required sfixed32 unknwn2 = 3;
  bool has_unknwn2() const;
  private:
  bool _internal_has_unknwn2() const;
  public:
  void clear_unknwn2();
  int32_t unknwn2() const;
  void set_unknwn2(int32_t value);
  private:
  int32_t _internal_unknwn2() const;
  void _internal_set_unknwn2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TeraLauncher.ServerList)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeraLauncher::ServerList_Server > servers_;
    int32_t lastplayedid_;
    int32_t unknwn2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serverlist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerList_Server

// required sfixed32 id = 1;
inline bool ServerList_Server::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServerList_Server::has_id() const {
  return _internal_has_id();
}
inline void ServerList_Server::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ServerList_Server::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ServerList_Server::id() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.id)
  return _internal_id();
}
inline void ServerList_Server::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.id_ = value;
}
inline void ServerList_Server::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.id)
}

// required bytes rawname = 2;
inline bool ServerList_Server::_internal_has_rawname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerList_Server::has_rawname() const {
  return _internal_has_rawname();
}
inline void ServerList_Server::clear_rawname() {
  _impl_.rawname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerList_Server::rawname() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.rawname)
  return _internal_rawname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_rawname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rawname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.rawname)
}
inline std::string* ServerList_Server::mutable_rawname() {
  std::string* _s = _internal_mutable_rawname();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.rawname)
  return _s;
}
inline const std::string& ServerList_Server::_internal_rawname() const {
  return _impl_.rawname_.Get();
}
inline void ServerList_Server::_internal_set_rawname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rawname_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_rawname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rawname_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_rawname() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.rawname)
  if (!_internal_has_rawname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rawname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rawname_.IsDefault()) {
    _impl_.rawname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_rawname(std::string* rawname) {
  if (rawname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rawname_.SetAllocated(rawname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rawname_.IsDefault()) {
    _impl_.rawname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.rawname)
}

// required bytes category = 3;
inline bool ServerList_Server::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerList_Server::has_category() const {
  return _internal_has_category();
}
inline void ServerList_Server::clear_category() {
  _impl_.category_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerList_Server::category() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_category(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.category_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.category)
}
inline std::string* ServerList_Server::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.category)
  return _s;
}
inline const std::string& ServerList_Server::_internal_category() const {
  return _impl_.category_.Get();
}
inline void ServerList_Server::_internal_set_category(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_category() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_category() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.category_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.category)
}

// required bytes name = 4;
inline bool ServerList_Server::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerList_Server::has_name() const {
  return _internal_has_name();
}
inline void ServerList_Server::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServerList_Server::name() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.name)
}
inline std::string* ServerList_Server::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.name)
  return _s;
}
inline const std::string& ServerList_Server::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ServerList_Server::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_name() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.name)
}

// required bytes crowdness = 5;
inline bool ServerList_Server::_internal_has_crowdness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerList_Server::has_crowdness() const {
  return _internal_has_crowdness();
}
inline void ServerList_Server::clear_crowdness() {
  _impl_.crowdness_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServerList_Server::crowdness() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.crowdness)
  return _internal_crowdness();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_crowdness(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.crowdness_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.crowdness)
}
inline std::string* ServerList_Server::mutable_crowdness() {
  std::string* _s = _internal_mutable_crowdness();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.crowdness)
  return _s;
}
inline const std::string& ServerList_Server::_internal_crowdness() const {
  return _impl_.crowdness_.Get();
}
inline void ServerList_Server::_internal_set_crowdness(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.crowdness_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_crowdness() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.crowdness_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_crowdness() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.crowdness)
  if (!_internal_has_crowdness()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.crowdness_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crowdness_.IsDefault()) {
    _impl_.crowdness_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_crowdness(std::string* crowdness) {
  if (crowdness != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.crowdness_.SetAllocated(crowdness, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.crowdness_.IsDefault()) {
    _impl_.crowdness_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.crowdness)
}

// required bytes open = 6;
inline bool ServerList_Server::_internal_has_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServerList_Server::has_open() const {
  return _internal_has_open();
}
inline void ServerList_Server::clear_open() {
  _impl_.open_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ServerList_Server::open() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.open)
  return _internal_open();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_open(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.open_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.open)
}
inline std::string* ServerList_Server::mutable_open() {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.open)
  return _s;
}
inline const std::string& ServerList_Server::_internal_open() const {
  return _impl_.open_.Get();
}
inline void ServerList_Server::_internal_set_open(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.open_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_open() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.open_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_open() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.open)
  if (!_internal_has_open()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.open_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_.IsDefault()) {
    _impl_.open_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_open(std::string* open) {
  if (open != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.open_.SetAllocated(open, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.open_.IsDefault()) {
    _impl_.open_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.open)
}

// required sfixed32 ip = 7;
inline bool ServerList_Server::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServerList_Server::has_ip() const {
  return _internal_has_ip();
}
inline void ServerList_Server::clear_ip() {
  _impl_.ip_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ServerList_Server::_internal_ip() const {
  return _impl_.ip_;
}
inline int32_t ServerList_Server::ip() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.ip)
  return _internal_ip();
}
inline void ServerList_Server::_internal_set_ip(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ip_ = value;
}
inline void ServerList_Server::set_ip(int32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.ip)
}

// required sfixed32 port = 8;
inline bool ServerList_Server::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServerList_Server::has_port() const {
  return _internal_has_port();
}
inline void ServerList_Server::clear_port() {
  _impl_.port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ServerList_Server::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ServerList_Server::port() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.port)
  return _internal_port();
}
inline void ServerList_Server::_internal_set_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.port_ = value;
}
inline void ServerList_Server::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.port)
}

// required sfixed32 lang = 9;
inline bool ServerList_Server::_internal_has_lang() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ServerList_Server::has_lang() const {
  return _internal_has_lang();
}
inline void ServerList_Server::clear_lang() {
  _impl_.lang_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ServerList_Server::_internal_lang() const {
  return _impl_.lang_;
}
inline int32_t ServerList_Server::lang() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.lang)
  return _internal_lang();
}
inline void ServerList_Server::_internal_set_lang(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lang_ = value;
}
inline void ServerList_Server::set_lang(int32_t value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.lang)
}

// required bytes popup = 10;
inline bool ServerList_Server::_internal_has_popup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServerList_Server::has_popup() const {
  return _internal_has_popup();
}
inline void ServerList_Server::clear_popup() {
  _impl_.popup_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ServerList_Server::popup() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.Server.popup)
  return _internal_popup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerList_Server::set_popup(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.popup_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.Server.popup)
}
inline std::string* ServerList_Server::mutable_popup() {
  std::string* _s = _internal_mutable_popup();
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.Server.popup)
  return _s;
}
inline const std::string& ServerList_Server::_internal_popup() const {
  return _impl_.popup_.Get();
}
inline void ServerList_Server::_internal_set_popup(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.popup_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerList_Server::_internal_mutable_popup() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.popup_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerList_Server::release_popup() {
  // @@protoc_insertion_point(field_release:TeraLauncher.ServerList.Server.popup)
  if (!_internal_has_popup()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.popup_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.popup_.IsDefault()) {
    _impl_.popup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerList_Server::set_allocated_popup(std::string* popup) {
  if (popup != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.popup_.SetAllocated(popup, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.popup_.IsDefault()) {
    _impl_.popup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeraLauncher.ServerList.Server.popup)
}

// -------------------------------------------------------------------

// ServerList

// repeated .TeraLauncher.ServerList.Server servers = 1;
inline int ServerList::_internal_servers_size() const {
  return _impl_.servers_.size();
}
inline int ServerList::servers_size() const {
  return _internal_servers_size();
}
inline void ServerList::clear_servers() {
  _impl_.servers_.Clear();
}
inline ::TeraLauncher::ServerList_Server* ServerList::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:TeraLauncher.ServerList.servers)
  return _impl_.servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeraLauncher::ServerList_Server >*
ServerList::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:TeraLauncher.ServerList.servers)
  return &_impl_.servers_;
}
inline const ::TeraLauncher::ServerList_Server& ServerList::_internal_servers(int index) const {
  return _impl_.servers_.Get(index);
}
inline const ::TeraLauncher::ServerList_Server& ServerList::servers(int index) const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.servers)
  return _internal_servers(index);
}
inline ::TeraLauncher::ServerList_Server* ServerList::_internal_add_servers() {
  return _impl_.servers_.Add();
}
inline ::TeraLauncher::ServerList_Server* ServerList::add_servers() {
  ::TeraLauncher::ServerList_Server* _add = _internal_add_servers();
  // @@protoc_insertion_point(field_add:TeraLauncher.ServerList.servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TeraLauncher::ServerList_Server >&
ServerList::servers() const {
  // @@protoc_insertion_point(field_list:TeraLauncher.ServerList.servers)
  return _impl_.servers_;
}

// required sfixed32 LastPlayedId = 2;
inline bool ServerList::_internal_has_lastplayedid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerList::has_lastplayedid() const {
  return _internal_has_lastplayedid();
}
inline void ServerList::clear_lastplayedid() {
  _impl_.lastplayedid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ServerList::_internal_lastplayedid() const {
  return _impl_.lastplayedid_;
}
inline int32_t ServerList::lastplayedid() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.LastPlayedId)
  return _internal_lastplayedid();
}
inline void ServerList::_internal_set_lastplayedid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lastplayedid_ = value;
}
inline void ServerList::set_lastplayedid(int32_t value) {
  _internal_set_lastplayedid(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.LastPlayedId)
}

// required sfixed32 unknwn2 = 3;
inline bool ServerList::_internal_has_unknwn2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerList::has_unknwn2() const {
  return _internal_has_unknwn2();
}
inline void ServerList::clear_unknwn2() {
  _impl_.unknwn2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ServerList::_internal_unknwn2() const {
  return _impl_.unknwn2_;
}
inline int32_t ServerList::unknwn2() const {
  // @@protoc_insertion_point(field_get:TeraLauncher.ServerList.unknwn2)
  return _internal_unknwn2();
}
inline void ServerList::_internal_set_unknwn2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unknwn2_ = value;
}
inline void ServerList::set_unknwn2(int32_t value) {
  _internal_set_unknwn2(value);
  // @@protoc_insertion_point(field_set:TeraLauncher.ServerList.unknwn2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TeraLauncher

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serverlist_2eproto
