// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverlist.proto

#include "serverlist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TeraLauncher {
PROTOBUF_CONSTEXPR ServerList_Server::ServerList_Server(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rawname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crowdness_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.popup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.ip_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.lang_)*/0} {}
struct ServerList_ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerList_ServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerList_ServerDefaultTypeInternal() {}
  union {
    ServerList_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerList_ServerDefaultTypeInternal _ServerList_Server_default_instance_;
PROTOBUF_CONSTEXPR ServerList::ServerList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.servers_)*/{}
  , /*decltype(_impl_.lastplayedid_)*/0
  , /*decltype(_impl_.unknwn2_)*/0} {}
struct ServerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerListDefaultTypeInternal() {}
  union {
    ServerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerListDefaultTypeInternal _ServerList_default_instance_;
}  // namespace TeraLauncher
static ::_pb::Metadata file_level_metadata_serverlist_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_serverlist_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_serverlist_2eproto = nullptr;

const uint32_t TableStruct_serverlist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.rawname_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.crowdness_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList_Server, _impl_.popup_),
  6,
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  5,
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList, _impl_.servers_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList, _impl_.lastplayedid_),
  PROTOBUF_FIELD_OFFSET(::TeraLauncher::ServerList, _impl_.unknwn2_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::TeraLauncher::ServerList_Server)},
  { 26, 35, -1, sizeof(::TeraLauncher::ServerList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TeraLauncher::_ServerList_Server_default_instance_._instance,
  &::TeraLauncher::_ServerList_default_instance_._instance,
};

const char descriptor_table_protodef_serverlist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020serverlist.proto\022\014TeraLauncher\"\205\002\n\nSer"
  "verList\0220\n\007servers\030\001 \003(\0132\037.TeraLauncher."
  "ServerList.Server\022\024\n\014LastPlayedId\030\002 \002(\017\022"
  "\017\n\007unknwn2\030\003 \002(\017\032\235\001\n\006Server\022\n\n\002id\030\001 \002(\017\022"
  "\017\n\007rawname\030\002 \002(\014\022\020\n\010category\030\003 \002(\014\022\014\n\004na"
  "me\030\004 \002(\014\022\021\n\tcrowdness\030\005 \002(\014\022\014\n\004open\030\006 \002("
  "\014\022\n\n\002ip\030\007 \002(\017\022\014\n\004port\030\010 \002(\017\022\014\n\004lang\030\t \002("
  "\017\022\r\n\005popup\030\n \002(\014"
  ;
static ::_pbi::once_flag descriptor_table_serverlist_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_serverlist_2eproto = {
    false, false, 296, descriptor_table_protodef_serverlist_2eproto,
    "serverlist.proto",
    &descriptor_table_serverlist_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_serverlist_2eproto::offsets,
    file_level_metadata_serverlist_2eproto, file_level_enum_descriptors_serverlist_2eproto,
    file_level_service_descriptors_serverlist_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_serverlist_2eproto_getter() {
  return &descriptor_table_serverlist_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_serverlist_2eproto(&descriptor_table_serverlist_2eproto);
namespace TeraLauncher {

// ===================================================================

class ServerList_Server::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerList_Server>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rawname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crowdness(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lang(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_popup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

ServerList_Server::ServerList_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TeraLauncher.ServerList.Server)
}
ServerList_Server::ServerList_Server(const ServerList_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerList_Server* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawname_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.crowdness_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.popup_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.lang_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rawname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rawname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rawname()) {
    _this->_impl_.rawname_.Set(from._internal_rawname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.crowdness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crowdness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_crowdness()) {
    _this->_impl_.crowdness_.Set(from._internal_crowdness(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_open()) {
    _this->_impl_.open_.Set(from._internal_open(), 
      _this->GetArenaForAllocation());
  }
  _impl_.popup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.popup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_popup()) {
    _this->_impl_.popup_.Set(from._internal_popup(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lang_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lang_));
  // @@protoc_insertion_point(copy_constructor:TeraLauncher.ServerList.Server)
}

inline void ServerList_Server::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rawname_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.crowdness_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.popup_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.ip_){0}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.lang_){0}
  };
  _impl_.rawname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rawname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crowdness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crowdness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.popup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.popup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerList_Server::~ServerList_Server() {
  // @@protoc_insertion_point(destructor:TeraLauncher.ServerList.Server)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerList_Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rawname_.Destroy();
  _impl_.category_.Destroy();
  _impl_.name_.Destroy();
  _impl_.crowdness_.Destroy();
  _impl_.open_.Destroy();
  _impl_.popup_.Destroy();
}

void ServerList_Server::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerList_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:TeraLauncher.ServerList.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rawname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.crowdness_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.open_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.popup_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ip_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ip_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lang_) -
        reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.lang_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerList_Server::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sfixed32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required bytes rawname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rawname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes crowdness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_crowdness();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes open = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_open();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_ip(&has_bits);
          _impl_.ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_lang(&has_bits);
          _impl_.lang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required bytes popup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_popup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerList_Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeraLauncher.ServerList.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sfixed32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_id(), target);
  }

  // required bytes rawname = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rawname(), target);
  }

  // required bytes category = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_category(), target);
  }

  // required bytes name = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // required bytes crowdness = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_crowdness(), target);
  }

  // required bytes open = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_open(), target);
  }

  // required sfixed32 ip = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(7, this->_internal_ip(), target);
  }

  // required sfixed32 port = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(8, this->_internal_port(), target);
  }

  // required sfixed32 lang = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_lang(), target);
  }

  // required bytes popup = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_popup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeraLauncher.ServerList.Server)
  return target;
}

size_t ServerList_Server::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TeraLauncher.ServerList.Server)
  size_t total_size = 0;

  if (_internal_has_rawname()) {
    // required bytes rawname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawname());
  }

  if (_internal_has_category()) {
    // required bytes category = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_category());
  }

  if (_internal_has_name()) {
    // required bytes name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_crowdness()) {
    // required bytes crowdness = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_crowdness());
  }

  if (_internal_has_open()) {
    // required bytes open = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_open());
  }

  if (_internal_has_popup()) {
    // required bytes popup = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_popup());
  }

  if (_internal_has_id()) {
    // required sfixed32 id = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_ip()) {
    // required sfixed32 ip = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_port()) {
    // required sfixed32 port = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_lang()) {
    // required sfixed32 lang = 9;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ServerList_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeraLauncher.ServerList.Server)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes rawname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rawname());

    // required bytes category = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_category());

    // required bytes name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required bytes crowdness = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_crowdness());

    // required bytes open = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_open());

    // required bytes popup = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_popup());

    // required sfixed32 id = 1;
    total_size += 1 + 4;

    // required sfixed32 ip = 7;
    total_size += 1 + 4;

    // required sfixed32 port = 8;
    total_size += 1 + 4;

    // required sfixed32 lang = 9;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerList_Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerList_Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerList_Server::GetClassData() const { return &_class_data_; }


void ServerList_Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerList_Server*>(&to_msg);
  auto& from = static_cast<const ServerList_Server&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TeraLauncher.ServerList.Server)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rawname(from._internal_rawname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_crowdness(from._internal_crowdness());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_open(from._internal_open());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_popup(from._internal_popup());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lang_ = from._impl_.lang_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerList_Server::CopyFrom(const ServerList_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeraLauncher.ServerList.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList_Server::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerList_Server::InternalSwap(ServerList_Server* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rawname_, lhs_arena,
      &other->_impl_.rawname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crowdness_, lhs_arena,
      &other->_impl_.crowdness_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_, lhs_arena,
      &other->_impl_.open_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.popup_, lhs_arena,
      &other->_impl_.popup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerList_Server, _impl_.lang_)
      + sizeof(ServerList_Server::_impl_.lang_)
      - PROTOBUF_FIELD_OFFSET(ServerList_Server, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerList_Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverlist_2eproto_getter, &descriptor_table_serverlist_2eproto_once,
      file_level_metadata_serverlist_2eproto[0]);
}

// ===================================================================

class ServerList::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerList>()._impl_._has_bits_);
  static void set_has_lastplayedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unknwn2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ServerList::ServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TeraLauncher.ServerList)
}
ServerList::ServerList(const ServerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.servers_){from._impl_.servers_}
    , decltype(_impl_.lastplayedid_){}
    , decltype(_impl_.unknwn2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lastplayedid_, &from._impl_.lastplayedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unknwn2_) -
    reinterpret_cast<char*>(&_impl_.lastplayedid_)) + sizeof(_impl_.unknwn2_));
  // @@protoc_insertion_point(copy_constructor:TeraLauncher.ServerList)
}

inline void ServerList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.servers_){arena}
    , decltype(_impl_.lastplayedid_){0}
    , decltype(_impl_.unknwn2_){0}
  };
}

ServerList::~ServerList() {
  // @@protoc_insertion_point(destructor:TeraLauncher.ServerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servers_.~RepeatedPtrField();
}

void ServerList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:TeraLauncher.ServerList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lastplayedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unknwn2_) -
        reinterpret_cast<char*>(&_impl_.lastplayedid_)) + sizeof(_impl_.unknwn2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TeraLauncher.ServerList.Server servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 LastPlayedId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_lastplayedid(&has_bits);
          _impl_.lastplayedid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 unknwn2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_unknwn2(&has_bits);
          _impl_.unknwn2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeraLauncher.ServerList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TeraLauncher.ServerList.Server servers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required sfixed32 LastPlayedId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(2, this->_internal_lastplayedid(), target);
  }

  // required sfixed32 unknwn2 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_unknwn2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeraLauncher.ServerList)
  return target;
}

size_t ServerList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TeraLauncher.ServerList)
  size_t total_size = 0;

  if (_internal_has_lastplayedid()) {
    // required sfixed32 LastPlayedId = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_unknwn2()) {
    // required sfixed32 unknwn2 = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeraLauncher.ServerList)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sfixed32 LastPlayedId = 2;
    total_size += 1 + 4;

    // required sfixed32 unknwn2 = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TeraLauncher.ServerList.Server servers = 1;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->_impl_.servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerList::GetClassData() const { return &_class_data_; }


void ServerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerList*>(&to_msg);
  auto& from = static_cast<const ServerList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TeraLauncher.ServerList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.servers_.MergeFrom(from._impl_.servers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lastplayedid_ = from._impl_.lastplayedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unknwn2_ = from._impl_.unknwn2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerList::CopyFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeraLauncher.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.servers_))
    return false;
  return true;
}

void ServerList::InternalSwap(ServerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.servers_.InternalSwap(&other->_impl_.servers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerList, _impl_.unknwn2_)
      + sizeof(ServerList::_impl_.unknwn2_)
      - PROTOBUF_FIELD_OFFSET(ServerList, _impl_.lastplayedid_)>(
          reinterpret_cast<char*>(&_impl_.lastplayedid_),
          reinterpret_cast<char*>(&other->_impl_.lastplayedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_serverlist_2eproto_getter, &descriptor_table_serverlist_2eproto_once,
      file_level_metadata_serverlist_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TeraLauncher
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeraLauncher::ServerList_Server*
Arena::CreateMaybeMessage< ::TeraLauncher::ServerList_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeraLauncher::ServerList_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::TeraLauncher::ServerList*
Arena::CreateMaybeMessage< ::TeraLauncher::ServerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeraLauncher::ServerList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
